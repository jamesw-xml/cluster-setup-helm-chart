# Default values for cluster-setup.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

#storageClasses: []

storageClasses:
  - name: default
    provisioner: rancher.io/local-path
    volumeBindingMode: WaitForFirstConsumer
    reclaimPolicy: Retain
    allowVolumeExpansion: true


argo-cd:
  enabled: true
  crds:
    keep: false
  controller:
    replicas: 1
  namespaceOverride: argocd
  fullnameOverride: argocd
  server:
    insecure: true
    service:
      type: LoadBalancer
      port: 80
      targetPort: 8080

cert-manager:
  enabled: true
  crds:
    enabled: true
    keep: false
  ingressShim:
    defaultIssuerName: letsencrypt-prod
    defaultIssuerKind: ClusterIssuer

apisix:
  enabled: true
  namespace: ingress-apisix
  namespaceOverride: ingress-apisix
  applicationValues:
      apisix:
        enabled: true
        prometheus:
          enabled: true
        ssl:
          enabled: true
      service:
        type: LoadBalancer
        # annotations:
        #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"        
        #   service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "subnet-dev-spoke04"        
        # loadBalancerIp: 10.43.0.10
      gateway:
        type: LoadBalancer
        tls:
          enabled: true
          servicePort: 443
          containerPort: 9443

      admin:
        enabled: true

      dashboard:
        enabled: true

      ingress-controller:
        enabled: true
        config:
          apisix:
            serviceNamespace: ingress-apisix
            adminAPIVersion: "v3"
      etcd:
        persistence:
          enabled: true
          storageClass: default
          size: 10Gi
          accessModes:
            - ReadWriteOnce

kurrentdb:
  enabled: true
  namespace: kurrentdb
  image:
    repository: docker.kurrent.io/kurrent-latest/kurrentdb
    tag: latest
    pullPolicy: IfNotPresent
  insecure: true  # set to true to enable EVENTSTORE_INSECURE
  resources:
    requests:
      cpu: "400m"
      memory: "2Gi"
    limits:
      cpu: "500m"
      memory: "3Gi"
  pvc:
    name: pvc-eventstore
    storage: 20Gi
    storageClassName: default
  secretName: mysecret
  adminPasswordKey: changeit


kube-prometheus-stack:
  enabled: true
  namespaceOverride: monitoring
  applicationValues:
    namespaceOverride: monitoring
    grafana:
      persistence: 
        enabled: true
        storageClassName: default
        accessModes:
          - ReadWriteOnce
        size: 10Gi
    prometheus:
      prometheusSpec:
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
              storageClassName: default
